#!/usr/bin/env python3
"""
Script para probar la funcionalidad completa de Huffman despu√©s de la correcci√≥n.
"""

import sys
import os

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_huffman_functionality():
    """Probar la funcionalidad completa de Huffman"""
    try:
        from crypto.tools import HuffmanCoding
        
        print("üîç PROBANDO FUNCIONALIDAD HUFFMAN")
        print("=" * 50)
        
        # Inicializar
        huffman = HuffmanCoding()
        
        # Casos de prueba
        test_cases = [
            "UNIVERSIDAD NACIONAL DEL SANTA",
            "HELLO WORLD",
            "AAAAAA",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "The quick brown fox jumps over the lazy dog"
        ]
        
        all_passed = True
        
        for i, text in enumerate(test_cases, 1):
            print(f"\nüß™ Caso de prueba {i}: '{text}'")
            
            try:
                # Codificar
                encoded_text, codes, tree = huffman.encode(text)
                
                # Obtener estad√≠sticas
                stats = huffman.get_compression_stats(text, encoded_text)
                
                # Decodificar
                decoded_text = huffman.decode(encoded_text, tree)
                
                # Verificar
                is_correct = decoded_text == text
                
                print(f"  ‚úÖ Codificaci√≥n: {len(encoded_text)} bits")
                print(f"  ‚úÖ Decodificaci√≥n: {'CORRECTA' if is_correct else 'INCORRECTA'}")
                print(f"  ‚úÖ Compresi√≥n: {stats['compression_ratio']:.2f}:1")
                print(f"  ‚úÖ Ahorro: {stats['space_saved_percent']:.1f}%")
                print(f"  ‚úÖ C√≥digos: {len(codes)} caracteres √∫nicos")
                
                if not is_correct:
                    print(f"  ‚ùå ERROR: Texto original != Texto decodificado")
                    all_passed = False
                
            except Exception as e:
                print(f"  ‚ùå ERROR: {str(e)}")
                all_passed = False
        
        print("\n" + "=" * 50)
        if all_passed:
            print("üéä ¬°TODAS LAS PRUEBAS PASARON!")
            print("   ‚úÖ Codificaci√≥n funciona correctamente")
            print("   ‚úÖ Decodificaci√≥n funciona correctamente")
            print("   ‚úÖ Estad√≠sticas se calculan correctamente")
            print("   ‚úÖ Integridad de datos verificada")
            return True
        else:
            print("‚ùå ALGUNAS PRUEBAS FALLARON")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR CR√çTICO: {str(e)}")
        return False

def test_edge_cases():
    """Probar casos l√≠mite"""
    print("\nüîç PROBANDO CASOS L√çMITE")
    print("=" * 50)
    
    try:
        from crypto.tools import HuffmanCoding
        huffman = HuffmanCoding()
        
        # Caso 1: Texto muy corto (1 car√°cter)
        print("\nüìù Caso l√≠mite: Texto de 1 car√°cter")
        try:
            text = "A"
            encoded_text, codes, tree = huffman.encode(text)
            decoded_text = huffman.decode(encoded_text, tree)
            is_correct = decoded_text == text
            print(f"  ‚úÖ Texto de 1 car√°cter: {'CORRECTO' if is_correct else 'INCORRECTO'}")
            if not is_correct:
                return False
        except Exception as e:
            print(f"  ‚ùå ERROR inesperado: {str(e)}")
            return False
        
        # Caso 2: Texto vac√≠o
        print("\nüìù Caso l√≠mite: Texto vac√≠o")
        try:
            huffman.encode("")
            print("  ‚ùå ERROR: Deber√≠a fallar con texto vac√≠o")
            return False
        except Exception as e:
            print(f"  ‚úÖ Manejo correcto de error: {str(e)}")
        
        # Caso 3: Texto con un solo tipo de car√°cter repetido
        print("\nüìù Caso l√≠mite: Caracteres repetidos")
        try:
            text = "AAAA"
            encoded_text, codes, tree = huffman.encode(text)
            decoded_text = huffman.decode(encoded_text, tree)
            is_correct = decoded_text == text
            print(f"  ‚úÖ Caracteres repetidos: {'CORRECTO' if is_correct else 'INCORRECTO'}")
            if not is_correct:
                return False
        except Exception as e:
            print(f"  ‚ùå ERROR: {str(e)}")
            return False
        
        print("\n‚úÖ Todos los casos l√≠mite manejados correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en casos l√≠mite: {str(e)}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîß VERIFICADOR DE CORRECCI√ìN HUFFMAN")
    print("=" * 60)
    
    # Probar funcionalidad b√°sica
    basic_ok = test_huffman_functionality()
    
    # Probar casos l√≠mite
    edge_ok = test_edge_cases()
    
    # Resultado final
    print("\n" + "=" * 60)
    if basic_ok and edge_ok:
        print("üéä ¬°CORRECCI√ìN EXITOSA!")
        print("   ‚úÖ La funcionalidad Huffman est√° completamente operativa")
        print("   ‚úÖ Todos los casos de prueba pasan")
        print("   ‚úÖ Manejo de errores correcto")
        print("   ‚úÖ Integraci√≥n GUI-Backend corregida")
        return True
    else:
        print("‚ùå CORRECCI√ìN INCOMPLETA")
        print("   ‚ö†Ô∏è  Algunos problemas persisten")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
