#!/usr/bin/env python3
"""
üîê CryptoUNS - Sistema Criptogr√°fico Integral
============================================

Punto de entrada principal de la aplicaci√≥n CryptoUNS.
Sistema completo de criptograf√≠a con interfaz gr√°fica moderna.

Caracter√≠sticas:
- Criptograf√≠a cl√°sica: C√©sar, Vigen√®re, Playfair
- Criptograf√≠a moderna: RSA, Hash, DES, Firma Digital
- Herramientas: Huffman, Blockchain, Verificador de Integridad
- Interfaz gr√°fica moderna con ttkbootstrap

Autor: CryptoUNS Team
Fecha: 06 de julio, 2025
Versi√≥n: 1.0.0
"""

import sys
import os
import logging
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Importaciones del sistema
try:
    from src.data.config import *
    from src.data.themes import *
    from src.utils.constants import *
except ImportError as e:
    print(f"Error al importar m√≥dulos base: {e}")
    print("Aseg√∫rate de que todos los m√≥dulos est√©n correctamente instalados.")
    sys.exit(1)

# Configuraci√≥n de logging
def setup_logging():
    """Configurar sistema de logging"""
    log_format = LogConfig.FORMAT
    log_level = LogConfig.LEVEL
    
    # Crear directorio de logs si no existe
    log_dir = PathConfig.BASE_DIR / "logs"
    log_dir.mkdir(exist_ok=True)
    
    # Configurar logging
    logging.basicConfig(
        level=getattr(logging, log_level),
        format=log_format,
        handlers=[
            logging.FileHandler(log_dir / "crypto_uns.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # Crear logger principal
    logger = logging.getLogger("CryptoUNS")
    logger.info("Sistema de logging inicializado")
    return logger

# Verificar dependencias
def check_dependencies():
    """Verificar que las dependencias est√©n instaladas"""
    required_packages = [
        "ttkbootstrap",
        "PIL",  # pillow se importa como PIL
        "pyperclip",
        "cryptography"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå Faltan las siguientes dependencias:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüì¶ Instala las dependencias con:")
        print("   pip install -r requirements.txt")
        return False
    
    return True

# Inicializar aplicaci√≥n
def initialize_app():
    """Inicializar la aplicaci√≥n"""
    logger = setup_logging()
    
    # Verificar dependencias
    if not check_dependencies():
        return None
    
    logger.info("Inicializando CryptoUNS...")
    logger.info(f"Versi√≥n: {APP_VERSION}")
    logger.info(f"Autor: {APP_AUTHOR}")
    
    # Importar GUI despu√©s de verificar dependencias
    try:
        # Importar ttkbootstrap
        import ttkbootstrap as ttk
        from ttkbootstrap.constants import BOTH, X, Y, LEFT, RIGHT, TOP, BOTTOM, CENTER
        
        # Crear ventana principal
        root = ttk.Window(
            title=WindowConfig.TITLE,
            themename=ThemeConfig.DEFAULT_THEME
        )
        
        # Configurar ventana
        root.geometry(f"{WindowConfig.WIDTH}x{WindowConfig.HEIGHT}")
        root.minsize(WindowConfig.MIN_WIDTH, WindowConfig.MIN_HEIGHT)
        
        # Centrar ventana
        if WindowConfig.CENTERED:
            root.place_window_center()
        
        # Configurar icono si existe
        icon_path = PathConfig.BASE_DIR / WindowConfig.ICON_PATH
        if icon_path.exists():
            root.iconbitmap(str(icon_path))
        
        logger.info("Ventana principal creada exitosamente")
        return root, logger
        
    except Exception as e:
        logger.error(f"Error al crear ventana principal: {e}")
        return None

# Crear interfaz temporal
def create_temp_interface(root, logger):
    """Crear interfaz temporal mientras se desarrolla la GUI completa"""
    import ttkbootstrap as ttk
    from ttkbootstrap.constants import BOTH, X, Y, LEFT, RIGHT, TOP, BOTTOM, CENTER, W, E, N, S
    
    # Frame principal
    main_frame = ttk.Frame(root, padding=20)
    main_frame.pack(fill=BOTH, expand=True)
    
    # T√≠tulo
    title_label = ttk.Label(
        main_frame,
        text="üîê CryptoUNS",
        font=("Segoe UI", 24, "bold"),
        bootstyle="info"
    )
    title_label.pack(pady=(0, 10))
    
    # Subt√≠tulo
    subtitle_label = ttk.Label(
        main_frame,
        text="Sistema Criptogr√°fico Integral",
        font=("Segoe UI", 14),
        bootstyle="secondary"
    )
    subtitle_label.pack(pady=(0, 30))
    
    # Informaci√≥n del proyecto
    info_frame = ttk.LabelFrame(
        main_frame,
        text="üìã Informaci√≥n del Proyecto",
        padding=20
    )
    info_frame.pack(fill=X, pady=(0, 20))
    
    # Detalles del proyecto
    details = [
        ("üìä Versi√≥n:", APP_VERSION),
        ("üë• Autor:", APP_AUTHOR),
        ("üìÖ Fecha:", "06 de julio, 2025"),
        ("üéØ Estado:", "En desarrollo - Fase 1 completada"),
        ("üîß Framework:", "ttkbootstrap + Python 3.9+"),
        ("üèóÔ∏è Arquitectura:", "Modular y escalable")
    ]
    
    for i, (label, value) in enumerate(details):
        detail_frame = ttk.Frame(info_frame)
        detail_frame.pack(fill=X, pady=2)
        
        ttk.Label(
            detail_frame,
            text=label,
            font=("Segoe UI", 10, "bold")
        ).pack(side=LEFT)
        
        ttk.Label(
            detail_frame,
            text=value,
            font=("Segoe UI", 10)
        ).pack(side=LEFT, padx=(10, 0))
    
    # Funcionalidades por implementar
    features_frame = ttk.LabelFrame(
        main_frame,
        text="üöÄ Funcionalidades por Implementar",
        padding=20
    )
    features_frame.pack(fill=X, pady=(0, 20))
    
    # Lista de funcionalidades
    features = [
        "üìö Criptograf√≠a Cl√°sica: C√©sar, Vigen√®re, Playfair, Kasiski",
        "üîí Criptograf√≠a Moderna: RSA, Hash, DES, Firma Digital",
        "üõ†Ô∏è Herramientas: Huffman, Blockchain, Verificador de Integridad",
        "üé® Interfaz Gr√°fica Completa y Moderna",
        "‚úÖ Validaciones y Manejo de Errores",
        "üìñ Documentaci√≥n y Manuales"
    ]
    
    for feature in features:
        ttk.Label(
            features_frame,
            text=f"‚Ä¢ {feature}",
            font=("Segoe UI", 10)
        ).pack(anchor=W, pady=1)
    
    # Botones de acci√≥n
    buttons_frame = ttk.Frame(main_frame)
    buttons_frame.pack(fill=X, pady=(20, 0))
    
    # Bot√≥n de informaci√≥n
    def show_info():
        import tkinter.messagebox as msgbox
        msgbox.showinfo(
            "Informaci√≥n",
            f"CryptoUNS v{APP_VERSION}\n\n"
            f"Sistema Criptogr√°fico Integral desarrollado con Python y ttkbootstrap.\n\n"
            f"Autor: {APP_AUTHOR}\n"
            f"Fecha: 06 de julio, 2025\n\n"
            f"Estado: Fase 1 - Arquitectura base completada\n"
            f"Pr√≥ximo: Implementaci√≥n de algoritmos criptogr√°ficos"
        )
    
    # Bot√≥n de salir
    def exit_app():
        logger.info("Cerrando aplicaci√≥n")
        root.quit()
    
    ttk.Button(
        buttons_frame,
        text="‚ÑπÔ∏è Informaci√≥n",
        command=show_info,
        bootstyle="info"
    ).pack(side=LEFT, padx=(0, 10))
    
    ttk.Button(
        buttons_frame,
        text="üö™ Salir",
        command=exit_app,
        bootstyle="danger"
    ).pack(side=RIGHT)
    
    # Barra de estado
    status_frame = ttk.Frame(root)
    status_frame.pack(fill=X, side=BOTTOM)
    
    ttk.Label(
        status_frame,
        text="Estado: Aplicaci√≥n inicializada - Fase 1 completada",
        font=("Segoe UI", 9),
        bootstyle="secondary"
    ).pack(side=LEFT, padx=10, pady=5)
    
    ttk.Label(
        status_frame,
        text=f"v{APP_VERSION}",
        font=("Segoe UI", 9),
        bootstyle="secondary"
    ).pack(side=RIGHT, padx=10, pady=5)
    
    logger.info("Interfaz temporal creada exitosamente")

# Funci√≥n principal
def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    print("üîê Iniciando CryptoUNS...")
    print(f"   Sistema Criptogr√°fico Integral v{APP_VERSION}")
    print(f"   Autor: {APP_AUTHOR}")
    print("")
    
    # Verificar dependencias
    if not check_dependencies():
        print("‚ùå Error: Faltan dependencias requeridas")
        sys.exit(1)
    
    # Configurar logging
    logger = setup_logging()
    logger.info("Iniciando CryptoUNS...")
    
    # Importar y ejecutar la aplicaci√≥n principal
    try:
        from src.gui.main_window import CryptoUNSApp
        
        print("‚úÖ Aplicaci√≥n iniciada exitosamente")
        print("")
        print("üéØ Estado del proyecto:")
        print("   ‚úÖ Fase 1 - Arquitectura base completada")
        print("   ‚úÖ Fase 2 - Algoritmos criptogr√°ficos implementados")
        print("   ‚úÖ Todas las pruebas unitarias pasan (92/92)")
        print("   üöÄ Fase 3 - Interfaz gr√°fica en desarrollo")
        print("")
        
        logger.info("Iniciando interfaz gr√°fica principal...")
        app = CryptoUNSApp()
        app.run()
        
    except ImportError as e:
        logger.error(f"Error al importar m√≥dulos: {e}")
        print(f"‚ùå Error al importar m√≥dulos: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        logger.info("Aplicaci√≥n terminada por el usuario")
    except Exception as e:
        logger.error(f"Error en la aplicaci√≥n: {e}")
        print(f"‚ùå Error en la aplicaci√≥n: {e}")
        raise
    finally:
        logger.info("Aplicaci√≥n terminada")

# Funci√≥n de manejo de errores
def handle_exception(exc_type, exc_value, exc_traceback):
    """Manejar excepciones no capturadas"""
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    logger = logging.getLogger("CryptoUNS")
    logger.error(
        "Excepci√≥n no capturada",
        exc_info=(exc_type, exc_value, exc_traceback)
    )

# Configurar manejo de excepciones
sys.excepthook = handle_exception

# Ejecutar aplicaci√≥n
if __name__ == "__main__":
    main()
